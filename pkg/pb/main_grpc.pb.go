// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/proto/main.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Floofy_Create_FullMethodName = "/Floofy/Create"
	Floofy_Get_FullMethodName    = "/Floofy/Get"
	Floofy_Update_FullMethodName = "/Floofy/Update"
)

// FloofyClient is the client API for Floofy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FloofyClient interface {
	Create(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Response, error)
}

type floofyClient struct {
	cc grpc.ClientConnInterface
}

func NewFloofyClient(cc grpc.ClientConnInterface) FloofyClient {
	return &floofyClient{cc}
}

func (c *floofyClient) Create(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Floofy_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *floofyClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResp)
	err := c.cc.Invoke(ctx, Floofy_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *floofyClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Floofy_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FloofyServer is the server API for Floofy service.
// All implementations must embed UnimplementedFloofyServer
// for forward compatibility.
type FloofyServer interface {
	Create(context.Context, *AddReq) (*Response, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	Update(context.Context, *UpdateReq) (*Response, error)
	mustEmbedUnimplementedFloofyServer()
}

// UnimplementedFloofyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFloofyServer struct{}

func (UnimplementedFloofyServer) Create(context.Context, *AddReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFloofyServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFloofyServer) Update(context.Context, *UpdateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFloofyServer) mustEmbedUnimplementedFloofyServer() {}
func (UnimplementedFloofyServer) testEmbeddedByValue()                {}

// UnsafeFloofyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FloofyServer will
// result in compilation errors.
type UnsafeFloofyServer interface {
	mustEmbedUnimplementedFloofyServer()
}

func RegisterFloofyServer(s grpc.ServiceRegistrar, srv FloofyServer) {
	// If the following call pancis, it indicates UnimplementedFloofyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Floofy_ServiceDesc, srv)
}

func _Floofy_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloofyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Floofy_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloofyServer).Create(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Floofy_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloofyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Floofy_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloofyServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Floofy_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FloofyServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Floofy_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FloofyServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Floofy_ServiceDesc is the grpc.ServiceDesc for Floofy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Floofy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Floofy",
	HandlerType: (*FloofyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Floofy_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Floofy_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Floofy_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/main.proto",
}
